@page
@model VirtualAssistantGPT.Web.Pages.MicrophoneModel
@{
    <h1>Voice transcription from microphone</h1>
    <button id="startBtn" onclick="butRecordAudioStart_Click();" class="btn btn-primary" >Start Record</button>
    <button id="stopBtn"  onclick="butRecordAudioStop_Click();" class="btn btn-primary" >Stop</button>
    <button id="downloadBtn" onclick="butDownloadBlob_Click();" class="btn btn-primary">Download Audio</button>
    <button id="updateBtn" onclick="butUploadBlob_Click();" class="btn btn-primary">Upload Audio</button>
   
    <form id="form" method="post" enctype="multipart/form-data">
        <input type="file" asp-for="Upload" />
        <input type="submit" />
    </form>
    <form class="form">
       
            <div class="form-group" id="answerForm">
                <label>Answer</label>
                <textarea disabled class="form-control" id="answer"></textarea>
            </div>
       
       
            <div class="form-group" id="errorForm">
                <label>Error</label>
                <textarea disabled class="form-control" id="error"></textarea>
            </div>
        
    </form>

}
<script>

    $("#form").hide();
    $("#stopBtn").prop("disabled",true);
    $("#downloadBtn").prop("disabled", true);
    $("#updateBtn").prop("disabled", true);
    $("#answerForm").hide();
    $("#errorForm").hide();

    var BlazorAudioRecorder = {};

    (function () {
        var mStream;
        var mAudioChunks;
        var mMediaRecorder;
        var mCaller;
        var pAudioUrl;
        var pAudioBlob;

        BlazorAudioRecorder.StartRecord = async function () {
            mStream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mMediaRecorder = new MediaRecorder(mStream);
            mMediaRecorder.addEventListener('dataavailable', vEvent => {
                mAudioChunks.push(vEvent.data);
            });

            mMediaRecorder.addEventListener('error', vError => {
                console.warn('media recorder error: ' + vError);
            });

            mMediaRecorder.addEventListener('stop', () => {
                pAudioBlob = new Blob(mAudioChunks, { type: "audio/mp3;" });
                pAudioUrl = URL.createObjectURL(pAudioBlob);
            });

            mAudioChunks = [];
            mMediaRecorder.start();
            $("#startBtn").prop("disabled", true);
            $("#stopBtn").prop("disabled",false);
            $("#downloadBtn").prop("disabled", true);
            $("#updateBtn").prop("disabled", true);
        };

    

        BlazorAudioRecorder.StopRecord = function () {
            mMediaRecorder.stop();
            mStream.getTracks().forEach(pTrack => pTrack.stop());
            $("#startBtn").prop("disabled", true);
            $("#stopBtn").prop("disabled", true);
            $("#downloadBtn").prop("disabled", false);
            $("#updateBtn").prop("disabled", false);
        };

        BlazorAudioRecorder.DownloadBlob = function (vName) {
            // Create a link element
            const link = document.createElement("a");

            // Set the link's href to point to the Blob URL
            link.href = pAudioUrl;
            link.download = vName;

            // Append link to the body
            document.body.appendChild(link);

            // Dispatch click event on the link
            // This is necessary as link.click() does not work on the latest firefox
            link.dispatchEvent(
                new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                })
            );

            // Remove the link from the body
            document.body.removeChild(link);
            $("#startBtn").prop("disabled", false);
            $("#stopBtn").prop("disabled", true);
            $("#downloadBtn").prop("disabled", true);
            $("#updateBtn").prop("disabled", true);
        };

        BlazorAudioRecorder.UploadBlob = function (vName) {

           var form = $("#form");
           var formdata = new FormData(form[0]);
           formdata.set("Upload",pAudioBlob, vName);
           fetch(window.location.href, {
               method: 'POST',
               body: formdata
            })
            .then((response) => response.json())
            .then((data) => {
                $("#answerForm").show();
                $("#answer").val(data.answer);
             });
            $("#startBtn").prop("disabled", false);
            $("#stopBtn").prop("disabled", true);
            $("#downloadBtn").prop("disabled", true);
            $("#updateBtn").prop("disabled", true);
                    
         

        };
    })();

    function butRecordAudioStart_Click()
    {
        BlazorAudioRecorder.StartRecord();
    }
    function butRecordAudioStop_Click() {
        BlazorAudioRecorder.StopRecord();
    }

   
    function butDownloadBlob_Click() {
        BlazorAudioRecorder.DownloadBlob("MyRecording_Test.mp3");
    }

    function butUploadBlob_Click() 
    {
        BlazorAudioRecorder.UploadBlob("MyRecording_Test.mp3");
    }
</script>